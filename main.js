const readline = require("readline");
const fs = require("fs");
const { HttpsProxyAgent } = require("https-proxy-agent");
const { SocksProxyAgent } = require("socks-proxy-agent");
const fetchFn = typeof fetch === "function" ? fetch : require("node-fetch");
const { exec } = require("child_process");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(q) {
  return new Promise((resolve) => rl.question(q, resolve));
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

function getUserAgents() {
  const data = fs.readFileSync('user-agents.txt', 'utf-8');
  return data
    .split('\n')
    .map(line => line.trim())
    .filter(line => line && !line.startsWith('http'));
}
const userAgents = getUserAgents();

async function checkProxy(proxyObject) {
  const { proxy, type } = proxyObject;
  let agent;
  if (type === "http" || type === "https") {
    agent = new HttpsProxyAgent(`http://${proxy}`);
  } else if (type === "socks4" || type === "socks5") {
    agent = new SocksProxyAgent(`${type}://${proxy}`);
  } else {
    return { alive: false, working: false };
  }

  const randomUA = userAgents[Math.floor(Math.random() * userAgents.length)];

  async function tryFetch(url, options, timeout = 7000) {
    try {
      const res = await fetchFn(url, { ...options, agent, timeout });
      return res;
    } catch {
      return null;
    }
  }

  try {
    // 1) test ‡∏ß‡πà‡∏≤ proxy ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (httpbin)
    const aliveRes = await tryFetch("https://httpbin.org/ip", {
      method: "GET",
      headers: { "User-Agent": randomUA }
    });
    if (!aliveRes || !aliveRes.ok) return { alive: false, working: false };

    // 2) test ‡∏¢‡∏¥‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà ngl.link
    const body = new URLSearchParams({
      username: "testdummy",
      question: "proxycheck",
      deviceId: Math.random().toString(36).substring(2, 15),
    });

    const apiRes = await tryFetch("https://ngl.link/api/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": randomUA,
        "Origin": "https://ngl.link",
        "Referer": "https://ngl.link/testdummy"
      },
      body
    }, 2000);

    if (apiRes && apiRes.ok) {
      const text = await apiRes.text();
      if (text.includes("success") || text.includes("true") || apiRes.status === 200) {
        return { alive: true, working: true };
      }
    }

    return { alive: true, working: false };
  } catch {
    return { alive: false, working: false };
  }
}

(async () => {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î proxy list ‡∏à‡∏≤‡∏Å apiproxy.json...");
  let allProxies = [];
  try {
    const proxyConfig = JSON.parse(fs.readFileSync('apiproxy.json', 'utf8'));
    const SOURCES = proxyConfig.sources;
    const proxyLists = await Promise.all(
      SOURCES.map(async (source) => {
        const { type, url } = source;
        try {
          const res = await fetchFn(url, { timeout: 7000 });
          if (res.ok) {
            const text = await res.text();
            let proxies;
            try {
              // Try to parse as JSON
              const arr = JSON.parse(text);
              if (Array.isArray(arr)) {
                proxies = arr.map(obj => {
                  // If it's an object with ip/port, format as "ip:port"
                  if (obj.ip && obj.port) return `${obj.ip}:${obj.port}`;
                  // If it's a string, use as is
                  if (typeof obj === 'string') return obj.trim();
                  return null;
                }).filter(Boolean);
              } else {
                proxies = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
              }
            } catch {
              // Fallback: treat as plain text list
              proxies = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
            }
            // Only keep valid IP:PORT format
            return proxies
              .filter(p => /^\d{1,3}(\.\d{1,3}){3}:\d+$/.test(p))
              .map(p => ({ proxy: p, type: type }));
          }
          return [];
        } catch {
          return [];
        }
      })
    );
    allProxies = [...new Map(proxyLists.flat().map(item => [item.proxy, item])).values()];
  } catch {}
  console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î proxy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allProxies.length} ‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
  if (allProxies.length === 0) {
    console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö proxy ‡πÄ‡∏•‡∏¢ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á");
    return;
  }

  const shuffledProxies = shuffle(allProxies);
  const toCheck = shuffledProxies;
  console.log(`üöÄ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ä‡πá‡∏Ñ proxy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${toCheck.length} ‡∏ï‡∏±‡∏ß...`);

  const BATCH_SIZE = 200; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô proxy ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö

  let workingProxies = [];
  let aliveProxies = [];
  let checkedCount = 0;

  for (let i = 0; i < toCheck.length; i += BATCH_SIZE) {
    const batch = toCheck.slice(i, i + BATCH_SIZE);
    await Promise.all(
      batch.map(async (proxyObject) => {
        const result = await checkProxy(proxyObject);
        checkedCount++;
        if (result.alive && result.working) {
          workingProxies.push(proxyObject);
        } else if (result.alive) {
          aliveProxies.push(proxyObject);
        }
        process.stdout.write(`[${checkedCount}/${toCheck.length}] üü¢ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ${workingProxies.length} | üåê ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ${aliveProxies.length}\r`);
      })
    );
    if (workingProxies.length >= 100) {
      console.log(`\nüõë ‡∏û‡∏ö proxy ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏£‡∏ö 100 ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤`);
      break;
    }
  }

  console.log(`\n‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ${workingProxies.length} ‡∏ï‡∏±‡∏ß, ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ${aliveProxies.length} ‡∏ï‡∏±‡∏ß`);
  if (workingProxies.length === 0 && aliveProxies.length === 0) {
    console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö proxy ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á");
    return;
  }

  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á beep-sound.mp3
  exec('start beep-sound.mp3');

  const username = (await ask("\nusername (ngl.link/xxxx): ")).trim();
  const durationSec = parseInt(await ask("\n‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏¥‡∏á (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ): "), 10);
  let message = (await ask("\nmessage: ")).trim();
  if (message === "") {
    message = ""; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô sendMessage ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  }
  const randomMessages = [
  "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏ô‡∏∞ üíñ",
  "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
  "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ!",
  "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á?",
  "‡∏™‡πà‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô",
  "‡∏¢‡∏¥‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ üòä",
  "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô",
  "‡∏£‡∏±‡∏Å‡∏ô‡∏∞",
  "‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞",
  "‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ù‡∏±‡∏ô‡∏î‡∏µ üåô",
  "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚ú®",
  "‡∏¢‡∏¥‡πâ‡∏°‡∏™‡∏ß‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢",
  "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ô‡∏∞",
  "‡∏™‡∏π‡πâ ‡πÜ ‡∏ô‡∏∞ ‚úåÔ∏è",
  "‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ",
  "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
  "‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≤",
  "‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î!",
  "‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞",
  "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏î‡∏µ",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ",
  "‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Å‡πà‡∏á‡πÄ‡∏™‡∏°‡∏≠",
  "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ù‡∏∑‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏ô‡∏∞",
  "‡∏°‡∏µ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ",
  "‡πÄ‡∏à‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ ‡πÜ ‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÜ ‡∏ô‡∏∞",
  "‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏á‡∏Å‡πá‡∏î‡∏µ‡∏ô‡∏∞",
  "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô",
  "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á",
  "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å ‡πÜ ‡∏ô‡∏∞",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡πâ‡∏°‡πÑ‡∏î‡πâ",
  "‡∏£‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å ‡πÜ",
  "‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô",
  "‡πÇ‡∏•‡∏Å‡∏¢‡∏±‡∏á‡∏™‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠ üåç",
  "‡∏≠‡∏¢‡πà‡∏≤‡∏´‡∏±‡∏Å‡πÇ‡∏´‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
  "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°",
  "‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô ‡πÜ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÇ‡∏≠‡πÄ‡∏Ñ",
  "‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡∏î‡∏µ ‡πÜ",
  "‡∏Ñ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÜ üíß",
  "‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏∞",
  "‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ",
  "‡∏™‡∏π‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞",
  "‡∏û‡∏±‡∏Å‡πÉ‡∏à‡∏ö‡πâ‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ",
  "‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡∏±‡∏ô",
  "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡πÑ‡∏Å‡∏•",
  "‡∏¢‡∏¥‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏à‡∏±‡∏á",
  "‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà üåÖ",
  "‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ó‡∏∏‡∏Å ‡πÜ ‡∏ß‡∏±‡∏ô",
  "‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏™‡∏°‡∏≠",
  "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ô‡∏∞",
  "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß",
  "‡πÅ‡∏Ñ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß",
  "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ô‡∏∞",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏¢‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á",
  "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ‡∏¢‡∏±‡∏á‡πÑ‡∏´‡∏ß‡∏≠‡∏¢‡∏π‡πà",
  "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
  "‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏≠‡∏î‡∏ó‡∏ô‡πÑ‡∏ß‡πâ‡∏ô‡∏∞",
  "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß",
  "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏°‡∏≤‡∏Å‡πÑ‡∏õ",
  "‡∏°‡∏µ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ô‡∏∞ üí™",
  "‡∏¢‡∏¥‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏î‡πÉ‡∏™‡∏°‡∏≤‡∏Å",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì",
  "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ",
  "‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ ‡πÜ ‡∏ô‡∏∞",
  "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏Å‡πá‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
  "‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
  "‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô",
  "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤",
  "‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà",
  "‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÄ‡∏™‡∏°‡∏≠",
  "‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÜ ‡∏ô‡∏∞",
  "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ",
  "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏î‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‚ù§Ô∏è",
  "‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞",
  "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ",
  "‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ",
  "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏£‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì",
  "‡πÇ‡∏•‡∏Å‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà",
  "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß",
  "‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ ‡πÜ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô",
  "‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ",
  "‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡πÇ‡∏•‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ üôÇ",
  "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
  "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏¢‡∏¥‡πâ‡∏°‡πÑ‡∏î‡πâ",
  "‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞",
  "‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏£‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
  "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏à‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
  "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πá‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
  "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üíï",
  "‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏´‡∏°‡∏î",
  "‡∏£‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô",
  "‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç"
  ];
  rl.close();

  async function sendMessage(index, customUA) {
    let finalMessage;
    if (message === "") {
      // ‡∏ñ‡πâ‡∏≤ message ‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å randomMessages
      finalMessage = randomMessages[Math.floor(Math.random() * randomMessages.length)];
    } else {
      finalMessage = message;
    }

    const { proxy, type } = workingProxies[index];
    const body = new URLSearchParams({
      username: username,
      question: finalMessage,
      deviceId: Math.random().toString(36).substring(2, 15),
      gameSlug: '',
      referrer: '',
    });

    const randomUA = customUA || userAgents[Math.floor(Math.random() * userAgents.length)];
    const options = {
      method: "POST",
      headers: {
        'Host': 'ngl.link',
        'sec-ch-ua': '"Google Chrome";v="113", "Chromium";v="113", "Not-A.Brand";v="24"',
        'accept': '*/*',
        'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'x-requested-with': 'XMLHttpRequest',
        'sec-ch-ua-mobile': '?0',
        'user-agent': randomUA,
        'sec-ch-ua-platform': '"Windows"',
        'origin': 'https://ngl.link',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': `https://ngl.link/${username}`,
        'accept-language': 'tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7',
      },
      body,
    };

    let agent;
    if (type === "http" || type === "https") {
      agent = new HttpsProxyAgent(`http://${proxy}`);
    } else if (type === "socks4" || type === "socks5") {
      agent = new SocksProxyAgent(`${type}://${proxy}`);
    }

    try {
      await fetchFn("https://ngl.link/api/submit", { ...options, agent, timeout: 7000 });
      console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${finalMessage}" ‡∏ú‡πà‡∏≤‡∏ô ${proxy}`);
    } catch (e) {
      console.log(`‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: "${finalMessage}" ‡∏ú‡πà‡∏≤‡∏ô ${proxy} (Error: ${e.message})`);
    }
  }

  const CONCURRENCY = workingProxies.length; // ‡∏¢‡∏¥‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å proxy
  const endTime = Date.now() + durationSec * 1000;
  let sentCount = 0;

  console.log(`\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏¥‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î‡πÜ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${workingProxies.length} proxy ...`);

  async function fire() {
    while (Date.now() < endTime) {
      const batchUA = userAgents[Math.floor(Math.random() * userAgents.length)];
      const batch = [];
      for (let j = 0; j < CONCURRENCY; j++) {
        const proxyIndex = (sentCount + j) % workingProxies.length;
        batch.push(sendMessage(proxyIndex, batchUA));
      }
      // ‡∏¢‡∏¥‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
      Promise.all(batch).catch(() => {});
      sentCount += CONCURRENCY;
    }
    console.log(`\n‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${sentCount} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);
  }

  fire();
})();